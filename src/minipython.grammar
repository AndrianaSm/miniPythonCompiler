/*
* Test Comments
*/

Package minipython;

Helpers
	digit = ['0' .. '9'];
	letter = ['a' .. 'z']|['A' .. 'Z'];
	cr = 13;
	lf = 10;
	space = 32;
	single_quotes = ''';
    double_quotes = '"';
    underscore = '_';
	all = [0..127];
	eol = lf | cr | cr lf ;
	not_eol = [all - [cr + lf]];

Tokens
	tab = 9;
    def='def';
    l_par = '(';
    r_par = ')';
	eq = '=';
	comma=',';
	semi = ':';
	if = 'if';
	while = 'while';
    for = 'for';
    in = 'in';
    print = 'print';
    return = 'return';
    meq = '-=';
    seq = '/=';
    l_br = '[';
    r_br = ']';
    assert = 'assert';
    plus = '+';
    minus = '-';
    mult = '*';
    div = '/';
    mod = '%';
	dmult = '**';
	none = 'None';
    open = 'open';
    type = 'type';
    max = 'max';
    min = 'min';
    and = 'and';
    or = 'or';
    not = 'not';
    less = '<';
    great = '>';
    lesseq = '<=';
    greateq = '>=';
    noteq = '!=';
	eqeq = '==';
    true = 'true';
    false = 'false';
    dot = '.';
	blank = (space | lf | cr);
	id = (underscore)*letter (letter | digit |underscore)*;
	line_comment = '#' not_eol* eol;
	string = double_quotes not_eol* double_quotes | single_quotes not_eol* single_quotes;
	num = digit+ | (digit+ '.' digit+);

Ignored Tokens
	blank, line_comment;

Productions
	goal = commands*;

	commands =	{stat} statement |
				{func} function;

	function = def identifier l_par argument? r_par semi statement;

	argument = arg nextarg*;

	arg = identifier defaultval? ;

	defaultval = eq value;

	nextarg = comma identifier defaultval? ;

	statement =	{if}		tab* if booleanexpr semi statement |
				{while}		tab* while booleanexpr semi statement |
				{for}		tab* for [element]:identifier in [collection]:identifier semi statement |
				{return}	tab* return expression |
				{print}		tab* print expression commaexpression* |
				{equals}	tab* identifier equalsigns expression |
				{array}		tab* identifier l_br [index]:expression r_br [valarray]:eq expression |
				{assert}	tab* assert expression commaexpression? |
				{funccall}	tab* functioncall;


	commaexpression = comma expression;

	equalsigns = {eq} eq |
				{meq} meq |
				{seq} seq ;

	expression =
    					{binary}	arithmetics |
    					{open}		open l_par [first]:expression comma [second]:expression r_par |
    					{type}		type l_par identifier r_par |
    					{brackets}	l_br expression commaexpression* r_br;



    	nextvalue = comma value;

    	arithmetics = {mult} multiplication |
    	              {plus} [left]:arithmetics plus [right]:multiplication |
    	              {minus} [left]:arithmetics minus [right]:multiplication;

    	multiplication = {element} powerorelement |
    	                 {mult} [left]:multiplication mult [right]:powerorelement |
    	                 {div} [left]:multiplication div [right]:powerorelement |
    	                 {mod} [left]:multiplication mod [right]:powerorelement;

        powerorelement = {element} element |
                            {power} power;

        power = [elem]:element dmult [exponent]:element;

    	element = {max}		max l_par value nextvalue+ r_par |
                {min}		min l_par value nextvalue+ r_par |
                {array}		identifier l_br expression r_br |
                {value} value |
    	          {id} identifier |
    			  {funccall}	functioncall |
    			  {pars}		l_par expression r_par;


    booleanexpr = {rule1} booleanexpr andor comparison
                   |{rule2} not [comp1]:comparison;

    comparison=  {rule3} [exp1]:expression comparison_operator [exp2]:expression
                         |{rule4} true
                         |{rule5} false;

    andor = {and} and |
     			{or}  or;

	comparison_operator = {great} great |
			                      {less} less |
			                      {greateq} greateq |
			                      {lesseq} lesseq |
			                      {eqeq} eqeq |
			                      {noteq} noteq;

	functioncall = identifier l_par arglist? r_par;

	arglist = expression commaexpression*;

	value = {funccall}	identifier dot functioncall |
			{num}		number |
			{str_l}		string |
			{none}		none;

	number = num;

	identifier = id;



