/*
* Test Comments
*/

Package minipython;

Helpers
	digit = ['0' .. '9'];
	letter = ['a' .. 'z']|['A' .. 'Z'];
	cr = 13;
	lf = 10;
	space = 32;
	single_quotes = ''';
    double_quotes = '"';
    underscore = '_';
	all = [0..127];
	eol = lf | cr | cr lf ;
	not_eol = [all - [cr + lf]];

Tokens
	tab = 9;
    def='def';
    l_par = '(';
    r_par = ')';
	eq = '=';
	comma=',';
	semi = ':';
	if = 'if';
	while = 'while';
    for = 'for';
    in = 'in';
    print = 'print';
    return = 'return';
    meq = '-=';
    seq = '/=';
    l_br = '[';
    r_br = ']';
    assert = 'assert';
    plus = '+';
    minus = '-';
    mult = '*';
    div = '/';
    mod = '%';
	dmult = '**';
	none = 'None';
    open = 'open';
    type = 'type';
    max = 'max';
    min = 'min';
    and = 'and';
    or = 'or';
    not = 'not';
    less = '<';
    great = '>';
    lesseq = '<=';
    greateq = '>=';
    noteq = '!=';
	eqeq = '==';
    true = 'true';
    false = 'false';
    dot = '.';
	blank = (space | lf | cr);
	id = (underscore)*letter (letter | digit |underscore)*;
	line_comment = '#' not_eol* eol;
	string = double_quotes not_eol* double_quotes | single_quotes not_eol* single_quotes;
	num = digit+ | (digit+ '.' digit+);

Ignored Tokens
	blank, line_comment;

Productions
	goal = commands*{->New goal([commands])};

	commands =	{stat} statement {->New commands.stat(statement)}|
				{func} function{->New commands.func (function)};

	function = def identifier l_par argument? r_par semi statement{-> New function(identifier,[argument],statement)};

	argument = arg nextarg*{-> New argument(arg,[nextarg])};

	arg = identifier defaultval?{->New arg(identifier,[defaultval])} ;

	defaultval = eq value{->New defaultval(value)};

	nextarg = comma identifier defaultval? {-> New nextarg(identifier,[defaultval])};

	statement =	{if}		tab* if boolexpr semi statement {-> New statement.if(boolexpr, statement)}|
				{while}		tab* while boolexpr semi statement {-> New statement.while(boolexpr, statement)}|
				{for}		tab* for [element]:identifier in [collection]:identifier semi statement {->New statement.for(element,collection,statement)}|
				{return}	tab* return expression {->New statement.return(expression)}|
				{print}		tab* print expression commaexpression* {->New statement.print(expression,[commaexpression])}|
				{equals}	tab* identifier equalsigns expression {->New statement.equals(identifier,equalsigns,expression)}|
				{array}		tab* identifier l_br [index]:expression r_br eq [valarray]:expression {->New statement.array(identifier,index,valarray)}|
				{assert}	tab* assert expression commaexpression? {->New statement.assert(expression,[commaexpression])}|
				{funccall}	tab* functioncall{->New statement.funccall(functioncall)};


	commaexpression = comma expression{->New commaexpression(expression)};

	equalsigns = {eq} eq {->New equalsigns.eq()}|
				{meq} meq {->New equalsigns.meq()}|
				{seq} seq {->New equalsigns.seq()};

	expression =
    					{binary}	arithmetics {->New expression.binary(arithmetics)}|
    					{open}		open l_par [first]:expression comma [second]:expression r_par {->New expression.open(first,second)}|
    					{type}		type l_par identifier r_par {->New expression.type(identifier)}|
    					{brackets}	l_br expression commaexpression* r_br{->New expression.brackets(expression,[commaexpression])};

    	nextvalue = comma value{->New nextvalue(value)};

        arithmetics = {mult} multiplication {->New arithmetics.mult(multiplication)}|
    	              {plus} [left]:arithmetics plus [right]:multiplication {->New arithmetics.plus(left,right)}|
    	              {minus} [left]:arithmetics minus [right]:multiplication {->New arithmetics.minus(left,right)};

    	multiplication = {element} powerorelement {-> powerorelement.multiplication}|
    	                  {mult} multiplication mult powerorelement {->New multiplication.mult(multiplication,powerorelement.multiplication)}|
                           {div} multiplication div powerorelement {->New multiplication.div(multiplication,powerorelement.multiplication)}|
                           {mod} multiplication mod powerorelement {->New multiplication.mod(multiplication,powerorelement.multiplication)};

        powerorelement{-> multiplication} = {element} element {-> element.multiplication}|
                            {power} power{-> power.multiplication};

        power{-> multiplication} = [elem]:element dmult [exponent]:element {-> New multiplication.power(elem.multiplication,exponent.multiplication)};

    	element{-> multiplication} = {max}  max l_par value nextvalue+ r_par {->New multiplication.max(value,[nextvalue])}|
                                     {min}	min l_par value nextvalue+ r_par {->New multiplication.min(value,[nextvalue])}|
                                     {array}    identifier l_br expression r_br {->New multiplication.array(identifier,expression)}|
                                     {value} value {->New multiplication.value(value)}|
    	                             {id} identifier {->New multiplication.id(identifier)}|
    			                     {funccall}	functioncall {->New multiplication.funccall(functioncall)}|
    			                     {pars}     l_par expression r_par {->New multiplication.pars(expression)};


    boolexpr = {rule1} boolexprpart andor boolexpr {-> New boolexpr.rule1(boolexprpart,andor,boolexpr)}
                |{rule2} not boolexprpart {-> New boolexpr.rule2(boolexprpart)}
                |{rule3} boolexprpart{-> New boolexpr.rule3(boolexprpart)};

    boolexprpart = {value} boolvalue {-> New boolexprpart.value(boolvalue)}
                        | {comparison} comparison {-> New boolexprpart.comparison(comparison)}
                        | {pars} l_par boolexpr r_par {-> New boolexprpart.pars(boolexpr)};

    boolvalue = {true} true{-> New boolvalue.true(true)} |
                {false} false{-> New boolvalue.false(false)};

    comparison= [exp1]:expression comparison_operator [exp2]:expression;


    andor = {and} and {->New andor.and()}|
     			{or}  or {->New andor.or()};

	comparison_operator = {great} great {->New comparison_operator.great()}|
			                      {less} less {->New comparison_operator.less()}|
			                      {greateq} greateq {->New comparison_operator.greateq()}|
			                      {lesseq} lesseq {->New comparison_operator.lesseq()}|
			                      {eqeq} eqeq {->New comparison_operator.eqeq()}|
			                      {noteq} noteq {->New comparison_operator.noteq()};

	functioncall = identifier l_par arglist? r_par {->New functioncall(identifier,[arglist])};

	arglist = expression commaexpression* {->New arglist(expression,[commaexpression])};

	value = {funccall}	identifier dot functioncall {->New value.funccall(identifier,functioncall)}|
			{num}		number {->New value.num(number)}|
			{str_l}		string {->New value.str_l(string)}|
			{none}		none {->New value.none(none)};

	number = num {->New number(num)};

	identifier = id {->New identifier(id)};

Abstract Syntax Tree

	goal = commands*;

	commands =	{stat} statement |
				{func} function;

	function = identifier argument* statement;

	argument = arg nextarg*;

	arg = identifier defaultval* ;

	defaultval = value;

	nextarg = identifier defaultval* ;

	 statement =    {if}        boolexpr statement |
                    {while}	    boolexpr statement |
                	{for}		[element]:identifier [collection]:identifier statement |
                    {return}	expression |
                	{print}     expression commaexpression* |
				    {equals}	identifier equalsigns expression |
				    {array}		identifier  [index]:expression  [valarray]: expression |
				    {assert}	expression commaexpression* |
				    {funccall}	functioncall;

    commaexpression = expression;

    equalsigns =    {eq} |
    			    {meq} |
    				{seq};

    expression =
        					{binary}	arithmetics |
        					{open}		 [first]:expression  [second]:expression  |
        					{type}		  identifier  |
        					{brackets}	 expression commaexpression* ;

    nextvalue = value;

    arithmetics = {mult} multiplication |
        	              {plus} [left]:arithmetics  [right]:multiplication |
        	              {minus} [left]:arithmetics  [right]:multiplication;

    multiplication = {element} powerorelement |
                     {mult} [left]:multiplication  [right]:multiplication |
        	         {div} [left]:multiplication  [right]:multiplication |
        	         {mod} [left]:multiplication  [right]:multiplication |
        	         {max} value nextvalue+ |
				 {min} value nextvalue+ |
				 {array} identifier expression |
				 {value} value |
				 {id} identifier |
				 {funccall} functioncall |
				 {pars} expression |
				 {power} [elem]:multiplication [exponent]:multiplication;

    boolexpr = {rule1} boolexprpart andor boolexpr |
               {rule2} boolexprpart |
               {rule3} boolexprpart;

    boolexprpart = {value} boolvalue |
                   {comparison} comparison |
                   {pars}  boolexpr;

    boolvalue = {true} true|
                {false} false ;

    comparison= [exp1]:expression comparison_operator [exp2]:expression;

    andor = {and} |
         	{or};

    comparison_operator =   {great} |
    			            {less} |
    			            {greateq} |
    			            {lesseq} |
    			            {eqeq} |
    			            {noteq};

    functioncall = identifier arglist*;

    arglist = expression commaexpression*;

    value = {funccall} identifier functioncall |
    		{num} number |
    		{str_l}	string |
    		{none} none;

    number = num;

    identifier = id;